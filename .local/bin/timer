#!/bin/sh

# This script is timer that counts down from a specified time
# and then sends a desktop notification with its chosen content.
# It also prints the time when the timer went off.

# Dependencies:
# mpv
# pv

# Optional dependency
# libnotify --- to use notify-send rather than awesome-client

# Default media file that is played when the timer goes off
defaultSound="${HOME}/Music/vn/umineko/far.mp3"
# Use libnotify (notify-send) to send notifications
useLibnotify=true
# This makes the text be colored cyan and be bolded
colorCyan='\033[1;36m'
# This makes the text be colored red and be bolded
colorRed='\033[1;31m'
# This makes the text be colored yellow and be bolded
colorYellow='\033[1;33m'
# This makes the text following it be normal/plain
colorEND='\033[0m'

presetFile="${XDG_DATA_HOME}/timer/presets.csv"

helpMsg(){
    cat << END
Usage: timer [OPTION] NUMBER[SUFFIX] MESSAGE [MESSAGE_BODY]
       timer {-p PRESET} | {--preset=PRESET}
       timer l | list
Count down from NUMBER seconds and send a notification with MESSAGE as the title
and MESSAGE_BODY as the body of the notification once the specified time (NUMBER[SUFFIX])
has passed.

NUMBER can be an integer or a decimal (e.g., 4, 0.3).
SUFFIX is the unit of time. It can be 's' for seconds, 'm' for minutes, 'h' for hours or 'd' for days.
If SUFFIX is omitted, NUMBER will be in seconds.

Required arguments for long options are mandatory for short options too.

  -s, --sound[=FILE]        play a media file once time is up.
                              FILE is a media file to be played.
                              If FILE is omitted, a default file
                              will be used.
  l, list                   list presets and their respective information.
  -p, --preset=PRESET       use a preset where PRESET is the name of
                              the preset to use.
  -h, --help                display this help text and exits the script
END
}

abort_or_default(){
    echo "The file '$1' does not exist."
    echo "The default sound is '$defaultSound'"
    read -r -p 'Use the default sound? [y/N] ' ans < /dev/tty
    [ "$ans" = y ] && return 0 || exit 1
}

soundCheckNSetter(){
    case "$1" in
        none) ;;
        default) doSound="mpv $defaultSound" ;;
        *)
            if [ -f $1 ]; then
                doSound="mpv $1"
            else
                abort_or_default $1 && doSound="mpv $defaultSound"
            fi
        ;;
    esac
}


triggerTimestamp(){
    # Display the time at which the timer will go off
    # Assumes the first argument is a valid time (e.g., '1h')
    currentHrs=$(date +'%-I')
    currentMins=$(date +'%-M')
    currentSecs=$(date +'%-S')

    amPM=$(date +%p)

    hours=$(echo $1 | grep -Eo '([0-9]+h)')
    minutes=$(echo $1 | grep -Eo '([0-9]+m)')
    seconds=$(echo $1 | grep -Eo '([0-9]+s)')

    # Strip the letter suffix (1h -> 1)
    [ "$hours" = '' ] && hours=0 || hours=${hours%?}
    [ "$minutes" = '' ] && minutes=0 || minutes=${minutes%?}
    [ "$seconds" = '' ] && seconds=0 || seconds=${seconds%?}

    # Determine if there will be carry over (e.g., 50s + 20s = 1m 10s)
    totalSecs=$(expr $currentSecs + $seconds)
    if [ $totalSecs -ge 60 ]; then
        seconds=$(expr $totalSecs % 60) # This will be displayed and should not change
        minutes=$(expr $minutes + $(expr $totalSecs / 60))
    else
        seconds=$totalSecs
    fi

    # Same thing as above but with minutes to hours
    totalMins=$(expr $currentMins + $minutes)
    if [ $totalMins -ge 60 ]; then
        minutes=$(expr $totalMins % 60) # This will be displayed and should not change
        hours=$(expr $hours + $(expr $totalMins / 60))
    else
        minutes=$totalMins
    fi

    # Same thing as above but handling hours turning from 12pm to 1am
    totalHrs=$(expr $currentHrs + $hours)
    if [ $totalHrs -ge 13 ]; then
        if [ $(expr $totalHrs % 12) -eq 0 ]; then
            hours=12 # This will be displayed and should not change
        else
            hours=$(expr $totalHrs % 12) # This will be displayed and should not change
         fi
        if [ $(expr $(expr $totalHrs / 12) % 2) -ne 0 ] ; then
            if [ $amPM = 'PM' ]; then
                amPM='AM'
            else
                amPM='PM'
            fi
        fi
    else
        hours=$totalHrs
    fi

    # Pad minutes and seconds with zeros
    if [ $minutes -lt 10 ]; then
        minutes="0$minutes"
    fi
    if [ $seconds -lt 10  ]; then
        seconds="0$seconds"
    fi

    echo "The timer will go off at ${colorYellow}${hours}:${minutes}:${seconds}${colorRed} ${amPM}${colorEND}"
}

# Shows text on how to use timer if no arguments were passed in
[ $# = 0 ] && echo "Usage: timer [OPTION] NUMBER[SUFFIX] MESSAGE [MESSAGE_BODY]\nTry 'timer --help' for more information." && exit 1

# If the first argument is '-s' or '--sound', then the second argument is probably the time.
# If '-s' or '--sound' is not the first argument, then time is probably the first argument.
# The same logic goes with the rest of the arguments and their corresponding positions.
case $1 in
    -s)
        if [ -f $2 ]; then
            doSound="mpv $2" && time=$3; messageTitle=$4; messageBody=$5
        else
            # Checks if the second argument is a valid time (e.g., 39m)
            echo $2 | grep -qE '^([0-9]+[smhd]?\s*)+$' && arg2=validTime

            if [ "$arg2" = validTime ]; then
                doSound="mpv $defaultSound"; time=$2; messageTitle=$3; messageBody=$4
            else
                # If the second argument is not a file nor is it a valid time,
                # then the user has a choice to abort or continue with the default sound.
                abort_or_default $2 && doSound="mpv $defaultSound"; time=$3; messageTitle=$4; messageBody=$5
            fi
        fi
        ;;
    --sound) doSound="mpv $defaultSound"; time=$2; messageTitle=$3; messageBody=$4;;
    --sound=*)
        # Essentially, ${1#*=} deletes anything that ends with '='. In this instance, '--sound=' will be deleted,
        # leaving the characters after '=' to stay. Example: saber=artoria -> artoria
        if [ -f ${1#*=} ]; then
            # If there is nothing after '=', then abort_or_default will execute.
            if [ $(echo $1 | wc -c) = 9 ]; then
                abort_or_default && doSound="mpv $defaultSound"; time=$2; messageTitle=$3; messageBody=$4
            else
                doSound="mpv ${1#*=}" time=$2; messageTitle=$3; messageBody=$4
            fi
        else
            abort_or_default ${1#*=} && doSound="mpv $defaultSound"; time=$2; messageTitle=$3; messageBody=$4
        fi
        ;;
    -p)
        while IFS=, read -r name duration msgTitle msgBody sound; do
            if [ $name = $2 ]; then
            # Determine if $sound is a valid file, and if $sound=default,
            # timer will use $defaultSound
            soundCheckNSetter "$sound"
            time=$duration; messageTitle=$msgTitle; messageBody=$msgBody
            fi
        done < $presetFile
        ;;
    --preset=*)
        while IFS=, read -r name duration msgTitle msgBody sound; do
            if [ $name = ${1#*=} ]; then
                soundCheckNSetter $sound
                time=$duration; messageTitle=$msgTitle; messageBody=$msgBody
            fi
        done < $presetFile
        ;;
    l | list)
        while IFS=, read -r name time msgTitle msgBody sound; do
            if [ ! $name = name ]; then
cat << END
${name}:
    Time:           $time
    Message title:  $msgTitle
    Message body:   $msgBody
    sound:          $sound
END
            fi
        done < $presetFile
        exit
        ;;
    -h | --help) helpMsg ; exit;;
    *) time=$1; messageTitle=$2; messageBody=$3;;
esac

# Determine the window manager
id="$(xprop -root -notype _NET_SUPPORTING_WM_CHECK)"
id="${id##* }"
wm="$(xprop -id "$id" -notype -len 100 -f _NET_WM_NAME 8t)"
echo "$wm" | grep -q 'awesome' && usingAwesome=true
# original line (bash only): wm="${wm/*WM_NAME = }"
# original line (bash only): wm="${wm/\"}"
# original line (bash only): wm="${wm/\"*}"

# The timer itself
if [ "$usingAwesome" = true -a "$useLibnotify" = false ]; then
    triggerTimestamp $time
    sleep $time | pv
    awesome-client << END
local naughty = require('naughty')
naughty.notify{
preset = naughty.config.presets.normal,
title = "${messageTitle}",
text = "${messageBody}",
}
END
    echo "\nFinished at $colorCyan$(date +"%r")$colorEND"; $doSound
else
    triggerTimestamp $time
    sleep $time | pv && notify-send "$messageTitle" "$messageBody" ; echo "\nFinished at $colorCyan$(date +"%r")$colorEND"; $doSound
fi
